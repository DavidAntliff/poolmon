# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to
# [[outputs.influxdb]]
#   ## The HTTP or UDP URL for your InfluxDB instance.  Each item should be
#   ## of the form:
#   ##   scheme "://" host [ ":" port]
#   ##
#   ## Multiple urls can be specified as part of the same cluster,
#   ## this means that only ONE of the urls will be written to each interval.
#   # urls = ["udp://localhost:8089"] # UDP endpoint example
#   urls = ["http://influxdb:8086"] # required
#   ## The target database for metrics (telegraf will create it if not exists).
#   database = "telegraf" # required

#   ## Name of existing retention policy to write to.  Empty string writes to
#   ## the default retention policy.
#   retention_policy = ""
#   ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
#   write_consistency = "any"

#   ## Write timeout (for the InfluxDB client), formatted as a string.
#   ## If not provided, will default to 5s. 0s means no timeout (not recommended).
#   timeout = "5s"
#   # username = "telegraf"
#   # password = "metricsmetricsmetricsmetrics"
#   ## Set the user agent for HTTP POSTs (can be useful for log differentiation)
#   # user_agent = "telegraf"
#   ## Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
#   # udp_payload = 512

#   ## Optional SSL Config
#   # ssl_ca = "/etc/telegraf/ca.pem"
#   # ssl_cert = "/etc/telegraf/cert.pem"
#   # ssl_key = "/etc/telegraf/key.pem"
#   ## Use SSL but skip chain & host verification
#   # insecure_skip_verify = false


[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]
  database = "system"
  retention_policy = "four_weeks_only"
  [outputs.influxdb.tagdrop]
    influxdb_database = ["*"]

[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]
  database = "poolmon"
  tagexclude = ["influxdb_database"]
  [outputs.influxdb.tagpass]
    influxdb_database = ["poolmon"]

[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]
  database = "ups"
  tagexclude = ["influxdb_database"]
  [outputs.influxdb.tagpass]
    influxdb_database = ["ups"]


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default, telegraf gather stats for all mountpoints.
  ## Setting mountpoints will restrict the stats to the specified mountpoints.
  # mount_points = ["/"]

  ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
  ## present on /run, /var/run, /dev/shm or /dev).
  ignore_fs = ["tmpfs", "devtmpfs", "devfs"]


# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb"]
  ## Uncomment the following line if you need disk serial numbers.
  # skip_serial_number = false
  #
  ## On systems which support it, device metadata can be added in the form of
  ## tags.
  ## Currently only Linux is supported via udev properties. You can view
  ## available properties for a device by running:
  ## 'udevadm info -q property -n /dev/sda'
  # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  #
  ## Using the same metadata source as device_tags, you can also customize the
  ## name of the device via templates.
  ## The 'name_templates' parameter is a list of templates to try and apply to
  ## the device. The template may contain variables in the form of '$PROPERTY' or
  ## '${PROPERTY}'. The first template which does not contain any variables not
  ## present for the device is used as the device name tag.
  ## The typical use case is for LVM volumes, to get the VG/LV name instead of
  ## the near-meaningless DM-0 name.
  # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]


# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration


# Read metrics about memory usage
[[inputs.mem]]
  # no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration


# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration


# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration


###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################


# # Read metrics from MQTT topic(s)

# Float values only
[[inputs.mqtt_consumer]]
  servers = ["mosquitto:1883"]
  name_override = "measurements_float"
  ## MQTT QoS, must be 0, 1, or 2
  qos = 0

  ## Topics to subscribe to
  topics = [
    "poolmon/#",
  ]

  # if true, messages that can't be delivered while the subscriber is offline
  # will be delivered when it comes back (such as on service restart).
  # NOTE: if true, client_id MUST be set
  persistent_session = true
  # If empty, a random client ID will be generated.
  client_id = "telegraf-consumer-float"

  ## username and password to connect MQTT server.
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  ## Optional SSL Config
  # ssl_ca = "/etc/telegraf/ca.pem"
  # ssl_cert = "/etc/telegraf/cert.pem"
  # ssl_key = "/etc/telegraf/key.pem"
  ## Use SSL but skip chain & host verification
  # insecure_skip_verify = false

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "value"
  data_type = "float"

  [inputs.mqtt_consumer.tags]
    influxdb_database = "poolmon"


# String values only
[[inputs.mqtt_consumer]]
  name_override = "measurements_string"
  servers = ["mosquitto:1883"]
  qos = 0

  # be explicit about topics to subscribe to as strings
  topics = [
    "poolmon/sensors/temp/+/detected",
	"poolmon/wifi/address",
	"poolmon/system/log",
  ]

  persistent_session = true
  client_id = "telegraf-consumer-string"

  data_format = "value"
  data_type = "string"

  [inputs.mqtt_consumer.tags]
    influxdb_database = "poolmon"


# Line Protocol values
# [[inputs.mqtt_consumer]]
#   name_override = "mqtt_consumer_line_protocol"
#   servers = ["mosquitto:1883"]
#   qos = 0

#   topics = [
#     "poolmon/line_protocol",
#   ]

#   persistent_session = true
#   client_id = "telegraf-consumer-line-protocol"

#   data_format = "influx"


[[inputs.mqtt_consumer]]
  servers = ["mosquitto:1883"]
  name_override = "ups_measurements_float"
  qos = 0
  topics = [
    "ups/#",
  ]

  persistent_session = true
  client_id = "telegraf-consumer-ups-float"

  data_format = "value"
  data_type = "float"

  [inputs.mqtt_consumer.tags]
    influxdb_database = "ups"


# String values only
[[inputs.mqtt_consumer]]
  name_override = "ups_measurements_string"
  servers = ["mosquitto:1883"]
  qos = 0

  # be explicit about topics to subscribe to as strings
  topics = [
    "ups/event",
  ]

  persistent_session = true
  client_id = "telegraf-consumer-ups-string"

  data_format = "value"
  data_type = "string"

  [inputs.mqtt_consumer.tags]
    influxdb_database = "ups"
